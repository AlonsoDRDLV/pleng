/**
 * 	Autores:fddd
 *	Fecha ultima revision:
 * 	Comentarios:
 */
options
{
  static = true;
  ignore_case = true;
}

PARSER_BEGIN(CompiladorMiniLeng)

import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class CompiladorMiniLeng
{
  public static void main(String args []) throws ParseException
  {
    //CompiladorMiniLeng parser = new CompiladorMiniLeng(System.in);
	//System.out.println("Leyendo de la entrada estandar...");
    try { 
    	CompiladorMiniLeng parser = new CompiladorMiniLeng(new FileInputStream(args[0]));
		//System.out.println("Leyendo de la entrada estandar...");
    	CompiladorMiniLeng.programa();
    	System.out.println("Analizado correctamente");
    }
    catch (TokenMgrError e) {
		//Error lÃƒÂ©xico
		try {
			System.out.println("ERROR LÃƒâ€°XICO ("
			+ SimpleCharStream.getBeginLine()
			+ ", "
			+ SimpleCharStream.getBeginColumn()
			+ "): SÃƒÂ­mbolo no reconocido: \""
			+ SimpleCharStream.readChar() + "\""
			);
		} catch (Exception ex) {
			// Excepcion por readChar
			System.out.println(ex.getMessage());
		}
	}
	catch (ParseException e) {
		//Error sintÃƒÂ¡ctico
		System.out.println("Error sintÃƒÂ¡ctico!");
        System.out.println(e.getMessage());
        CompiladorMiniLeng.ReInit(System.in);
	}
	catch (FileNotFoundException e) {
	  System.out.println("Ha ocurrido un error al intentar leer el fichero: "
	  	+ args[0]);
	  System.out.println(e.getMessage());
	}
	catch (Exception e) {
	  System.out.println(e.getMessage());
	}
    catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
	}
  }

  static String expectedTokens(int[][] expectedTokenSequences, String[] tokenImage) {
  	StringBuffer expected = new StringBuffer();
  	int maxSize = 0;
	for (int i = 0; i < expectedTokenSequences.length; i++) {
  		if (maxSize < expectedTokenSequences[i].length) {
    		maxSize = expectedTokenSequences[i].length;
  		}
  		for (int j = 0; j < expectedTokenSequences[i].length; j++) {
    		expected.append(tokenImage[expectedTokenSequences[i][j]]).append(", ");
  		}
	}
	return expected.substring(0, expected.length()-2);
  }
}

PARSER_END(CompiladorMiniLeng)

SKIP :
{
  " "
| < "%%" (~["%"])* "%%">
| <"%" (~["\n", "\r"])*>
| "\r"
| "\t"
| "\n"
}



TOKEN : /* AGRUPACIONES */
{
  <  tLLAVE_IZQ : "{" >
| <  tLLAVE_DCHA : "}" >
}

// ADICION NUESTRA.

TOKEN : /*  */
{
  < tPROGRAMA : "programa">
| < tPRINCIPIO : "principio">
| < tFIN : "fin">
| < tSI: "si" >
| < tENT: "ent" >
| < tSI_NO: "si_no" >
| < tFSI : "fsi">
| < tMQ : "mq" >
| < tFMQ : "fmq" >
}

TOKEN: /* E/S */
{
  < tESCRIBIR : "escribir" >
| < tLEER : "leer" >
}

TOKEN : /* Operador multiplicativo  */
{
  < tAND : "and" >
| < tMOD : "mod" >
| < tOR : "or" >
| < tNOT : "not" >
}

TOKEN : /*tipo_variables */
{
  < tENTERO : "entero" >
| < tBOOLEANO : "booleano" >
| < tCARACTER : "caracter" >
}

TOKEN : /*valor booleano*/
{
  < tTRUE : "true" >
| < tFALSE : "false" >
}

TOKEN : /* conversion de tipo entero y caracter */
{
  < tENTACAR : "entacar" >
| < tCARAENT : "caraent" >
}

TOKEN: /* accion */
{
  < tACCION : "accion" >
}

TOKEN : /* clase_parametros */
{
  < tVAL : "val" >
| < tREF : "ref" >
}

TOKEN : /* operador_relacional */
{
  < tMAYOR : ">" >
| < tMENOR : "<" >
| < tIGUAL : "=" >
| < tMAI : ">=" >
| < tMEI : "<=" >
| < tNI : "<>" >

}

TOKEN : /* otros */
{
  < tOPAS : ":=" >
| < tFIN_SENTENCIA : ";" >
| < tCOMA : "," >
| < tPARENTESIS_IZQ : "(" >
| < tPARENTESIS_DCH : ")" >
}

TOKEN: /* Operadores aritmÃƒÆ’Ã‚Â©ticos */
{
  < tMAS : "+">
| < tMENOS : "-" >
| < tDIV : "div" >
| < tMUL : "*" >
}

TOKEN : /* VALORES */
{
  < #DIGITO : ["0"-"9"] >
| < #LETRA : ["a"-"z","_","0"-"9"] >
| < tCONSTENTERA : (< DIGITO >)+ >
| < tCONSTCHAR : "\"" ~["\""] "\"">
| < tCONSTCAD : "\"" (~["\""])* "\"">
| <  tIDENTIFICADOR : (["a"-"z"] | ("_")+ (["a"-"z","0"-"9"])) (["a"-"z", "0"-"9"] | ( ("_")+ (["a"-"z","0"-"9"]) ) )* >
}

void programa ():
{}
{
	try {
	  <tPROGRAMA> <tIDENTIFICADOR> <tFIN_SENTENCIA> declaracion_variables() declaracion_acciones() bloque_sentencias() < EOF >
	}
    catch (ParseException e) {
		Token t = e.currentToken.next;
		System.out.println("ERROR SINTÃ�CTICO ("
		+ e.currentToken.next.beginLine
		+ ", "
		+ e.currentToken.next.beginColumn
		+ ") : "
		+ "En la declaraciÃ³n de programa, "
		+ "se ha encontrado "
		+ e.tokenImage[t.kind]
		+ " "
		+ e.currentToken.next.image
		+ ", se esperaba: "
		+ expectedTokens(e.expectedTokenSequences,e.tokenImage)
		);
      	
     	do {
		t = getNextToken();
		} while (t!=null && t.kind != EOF );
	}
}

void declaracion_variables():
{}
{
  	try {
		( declaracion() <tFIN_SENTENCIA> )*
	}
    catch (ParseException e) {	      
		Token t = e.currentToken.next;
		System.out.println("ERROR SINTÃ�CTICO ("
		+ e.currentToken.next.beginLine
		+ ", "
		+ e.currentToken.next.beginColumn
		+ ") : "
		+ "En la declaraciÃ³n de variables, "
		+ "se ha encontrado "
		+ e.tokenImage[t.kind]
		+ " "
		+ e.currentToken.next.image
		+ ", se esperaba: "
		+ expectedTokens(e.expectedTokenSequences,e.tokenImage)
		);

		if(t.kind != tPRINCIPIO) {  
	      	do {
			t = getNextToken();
			
			} while (t.kind != tFIN_SENTENCIA && t!=null && t.kind != EOF );
		}
		
	}
}

void declaracion ():
{}
{
  	  tipo_variables() identificadores()
}

void identificadores():
{}
{
  <tIDENTIFICADOR> ( < tCOMA > <tIDENTIFICADOR> )*
}

void tipo_variables():
{}
{
  <tENTERO> | <tCARACTER> | <tBOOLEANO>
}

void declaracion_acciones():
{}
{
  (declaracion_accion())*
}

void declaracion_accion():
{}
{
  	  cabecera_accion() declaracion_variables() declaracion_acciones() bloque_sentencias()
  	
}

void cabecera_accion():
{}
{
  try { <tACCION> <tIDENTIFICADOR> ( parametros_formales() ) < tFIN_SENTENCIA > }
  catch (ParseException e) {
      	Token t = e.currentToken.next;
		System.out.println("ERROR SINTÃ�CTICO ("
		+ e.currentToken.next.beginLine
		+ ", "
		+ e.currentToken.next.beginColumn
		+ ") : "
		+ "cabecera accion, "
		+ "se ha encontrado "
		+ e.tokenImage[t.kind]
		+ " "
		+ e.currentToken.next.image
		+ ", se esperaba: "
		+ expectedTokens(e.expectedTokenSequences,e.tokenImage)
		);
		if(t.kind != tPRINCIPIO) {
		do {
			t = getNextToken();
			
			} while (t.kind != tFIN_SENTENCIA && t!=null && t.kind != EOF );
		}
}
}

void parametros_formales() :
{}
{
  	try {
  		( < tPARENTESIS_IZQ > (parametros() (< tFIN_SENTENCIA > parametros() )*)? < tPARENTESIS_DCH > )?
  	}
  	catch (ParseException e) {
      	Token t = e.currentToken.next;
		System.out.println("ERROR SINTÃ�CTICO ("
		+ e.currentToken.next.beginLine
		+ ", "
		+ e.currentToken.next.beginColumn
		+ ") : "
		+ "Los parametros de la cabecera de la acciÃ³n son incorrectos, "
		+ "se ha encontrado "
		+ e.tokenImage[t.kind]
		+ " "
		+ e.currentToken.next.image
		+ ", se esperaba: "
		+ expectedTokens(e.expectedTokenSequences,e.tokenImage)
		);
		
      	do {
		t = getNextToken();
		} while (t.kind != tPARENTESIS_DCH && t!=null && t.kind != EOF );
	}
}

void lista_parametros():
{}
{
  	<tIDENTIFICADOR> (< tCOMA > <tIDENTIFICADOR>)* 
}

void parametros():
{}
{
	clase_parametros() tipo_variables() lista_parametros()
}

void clase_parametros():
{}
{
  	try {
  	  	<tVAL> | <tREF>
  	}
  	catch (ParseException e) {
  	  	Token t = e.currentToken.next;
		System.out.println("ERROR SINTÃ�CTICO ("
		+ e.currentToken.next.beginLine
		+ ", "
		+ e.currentToken.next.beginColumn
		+ ") : "
		+ "Se ha encontrado "
		+ e.tokenImage[t.kind]
		+ " "
		+ e.currentToken.next.image
		+ ", se esperaba una clase del parametro: val o ref"
		);
  	}
}

void bloque_sentencias(): // Error sintactico
{}
{
  	try {
  	 	<tPRINCIPIO> lista_sentencias() <tFIN>
  	}
  	catch (ParseException e) {
      	Token t = e.currentToken.next;
		System.out.println("ERROR SINTÃ�CTICO ("
		+ e.currentToken.next.beginLine
		+ ", "
		+ e.currentToken.next.beginColumn
		+ ") : "
		+ "En un bloque de sentencias "
		+ "se ha encontrado "
		+ e.tokenImage[t.kind]
		+ " "
		+ e.currentToken.next.image
		+ ", se esperaba: "
		+ expectedTokens(e.expectedTokenSequences,e.tokenImage)
		);
		
      	do {
		t = getNextToken();
		} while (t.kind != tFIN && t!=null && t.kind != EOF );
	}
}

void lista_sentencias():
{}
{
  ( sentencia() )+
}

void sentencia():
{}
{
	try {
  	    leer() < tFIN_SENTENCIA >
		| escribir() < tFIN_SENTENCIA >
		| <tIDENTIFICADOR> asig_incaccion() < tFIN_SENTENCIA >
		| seleccion()
		| mientras_que()
  	}
  	catch (ParseException e) {
  	  Token t = e.currentToken.next;
		System.out.println("ERROR SINTÃƒï¿½CTICO ("
		+ e.currentToken.next.beginLine
		+ ", "
		+ e.currentToken.next.beginColumn
		+ ") : "
		+ "En sentencia, "
		+ "se ha encontrado "
		+ e.tokenImage[t.kind]
		+ " "
		+ e.currentToken.next.image
		+ ", se esperaba: "
		+ expectedTokens(e.expectedTokenSequences,e.tokenImage)
		);
		
      	do {
		t = getNextToken();
		} while (t.kind != tFIN_SENTENCIA && t!=null && t.kind != EOF );
	}
}

void leer():
{}
{
  	  <tLEER> <tPARENTESIS_IZQ > lista_asignables() < tPARENTESIS_DCH >
}

void lista_asignables():
{}
{
  <tIDENTIFICADOR> ("," <tIDENTIFICADOR>)*
}

void lista_escribibles():
{}
{
  lista_expresiones()
}

void escribir():
{}
{
  	  <tESCRIBIR> <tPARENTESIS_IZQ> lista_escribibles() <tPARENTESIS_DCH>
}

void asig_incaccion():
{}
{
  asignacion() | invocacion_accion()
}

void asignacion():
{}
{
  	<tOPAS> expresion()
      
}

void invocacion_accion():
{}
{
  	  (argumentos())?
}

void mientras_que():
{}
{
  	try {
  	  <tMQ> expresion() lista_sentencias() <tFMQ>
  	}
  	catch (ParseException e) {
      	Token t = e.currentToken.next;
		System.out.println("ERROR SINTÃ�CTICO ("
		+ e.currentToken.next.beginLine
		+ ", "
		+ e.currentToken.next.beginColumn
		+ ") : "
		+ "En la cabecera de mq, "
		+ "se ha encontrado "
		+ e.tokenImage[t.kind]
		+ " "
		+ e.currentToken.next.image
		+ ", se esperaba: "
		+ expectedTokens(e.expectedTokenSequences,e.tokenImage)
		);
		
      	do {
		t = getNextToken();
		} while (t.kind != tFMQ && t!=null && t.kind != EOF );
	}
}

void seleccion():
{}
{
  	try {
  	  	<tSI> expresion() <tENT> lista_sentencias() ( <tSI_NO> lista_sentencias())? <tFSI>
  	}
  	catch (ParseException e) {
  	  	Token t = e.currentToken.next;
		System.out.println("ERROR SINTÃ�CTICO ("
		+ e.currentToken.next.beginLine
		+ ", "
		+ e.currentToken.next.beginColumn
		+ ") : "
		+ "En seleccion, "
		+ "se ha encontrado "
		+ e.tokenImage[t.kind]
		+ " "
		+ e.currentToken.next.image
		+ ", se esperaba: "
		+ expectedTokens(e.expectedTokenSequences,e.tokenImage)
		);

      	do {
		t = getNextToken();
		} while (t.kind != tFSI && t!=null && t.kind != EOF );
	}
}

void argumentos():
{}
{
  	try {
  	  < tPARENTESIS_IZQ > ( lista_expresiones() )? < tPARENTESIS_DCH >
  	}
  	catch (ParseException e) {
		Token t = e.currentToken.next;
		System.out.println("ERROR SINTÃ�CTICO ("
		+ e.currentToken.next.beginLine
		+ ", "
		+ e.currentToken.next.beginColumn
		+ ") : "
		+ "En la declaraciÃ³n de argumentos, "
		+ "se ha encontrado "
		+ e.tokenImage[t.kind]
		+ " "
		+ e.currentToken.next.image
		+ ", se esperaba: "
		+ expectedTokens(e.expectedTokenSequences,e.tokenImage)
		);

      	do {
		t = getNextToken();
		} while (t.kind != tPARENTESIS_DCH && t!=null && t.kind != EOF );
	}
}

void lista_expresiones():
{}
{
  	  expresion() (< tCOMA > expresion())*
}

void expresion():
{}
{
  expresion_simple() ( operador_relacional() expresion_simple() )?
}

void operador_relacional():
{}
{
	<tIGUAL> | <tNI> | <tMENOR> | <tMAYOR> | <tMEI> | <tMAI>
}

void expresion_simple(): // Error sintactico
{}
{
  termino() ( operador_aditivo() termino() )*
}

void operador_aditivo(): // Error sintactico
{}
{
  < tMAS > | < tMENOS > | <tOR>
}

void termino():
{}
{
  factor() ( operador_multiplicativo() factor() )*
}

void operador_multiplicativo(): // Error sintactico
{}
{
  < tMUL > | <tDIV> | <tMOD> | <tAND>
}

void factor(): // Error sintactico
{}
{
    try {
      "-" factor()
  	| "+" factor() 
  	|  <tNOT> factor()
    | < tPARENTESIS_IZQ > expresion() < tPARENTESIS_DCH >
    | <tENTACAR> < tPARENTESIS_IZQ > expresion() < tPARENTESIS_DCH >
    | <tCARAENT> < tPARENTESIS_IZQ > expresion() < tPARENTESIS_DCH >
    | <tIDENTIFICADOR>
    | <tCONSTENTERA>
    | <tCONSTCHAR>
    | <tCONSTCAD>
    | <tTRUE>
    | <tFALSE>
  	}
  	catch (ParseException e) {
      	Token t = e.currentToken.next;
	  System.out.println("ERROR SINTÃ�CTICO ("
		+ e.currentToken.next.beginLine
		+ ", "
		+ e.currentToken.next.beginColumn
		+ ") : "
		+ "Se ha encontrado "
		+ e.tokenImage[t.kind]
		+ " "
		+ e.currentToken.next.image
		+ ", se esperaba un factor"
		);

		do {
		t = getNextToken();
		} while (t.kind != tPARENTESIS_DCH && t.kind != tIDENTIFICADOR && t.kind != tCONSTENTERA
			&& t.kind != tCONSTCHAR && t.kind != tCONSTCAD && t.kind != tTRUE && t.kind != tFALSE
			&& t!=null && t.kind != EOF );
	}
}