/* Generated By:JavaCC: Do not edit this line. CompiladorMiniLeng.java */
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class CompiladorMiniLeng implements CompiladorMiniLengConstants {
  public static void main(String args []) throws ParseException
  {
    //CompiladorMiniLeng parser = new CompiladorMiniLeng(System.in);
        //System.out.println("Leyendo de la entrada estandar...");
    try {
        CompiladorMiniLeng parser = new CompiladorMiniLeng(new FileInputStream(args[0]));
                //System.out.println("Leyendo de la entrada estandar...");
        CompiladorMiniLeng.programa();
        System.out.println("Analizado correctamente");
    }
    catch (TokenMgrError e) {
                //Error léxico
                try {
                        System.out.println("ERROR L\u00c9XICO ("
                        + SimpleCharStream.getBeginLine()
                        + ", "
                        + SimpleCharStream.getBeginColumn()
                        + "): S\u00edmbolo no reconocido: \u005c""
                        + SimpleCharStream.readChar() + "\u005c""
                        );
                } catch (Exception ex) {
                        // Excepcion por readChar
                        System.out.println(ex.getMessage());
                }
        }
        catch (ParseException e) {
                //Error sintáctico
                System.out.println("Error sint\u00e1ctico!");
        System.out.println(e.getMessage());
        CompiladorMiniLeng.ReInit(System.in);
        }
        catch (FileNotFoundException e) {
          System.out.println("Ha ocurrido un error al intentar leer el fichero: "
                + args[0]);
          System.out.println(e.getMessage());
        }
        catch (Exception e) {
          System.out.println(e.getMessage());
        }
    catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        }
  }

  static String expectedTokens(int[][] expectedTokenSequences, String[] tokenImage) {
        StringBuffer expected = new StringBuffer();
        int maxSize = 0;
        for (int i = 0; i < expectedTokenSequences.length; i++) {
                if (maxSize < expectedTokenSequences[i].length) {
                maxSize = expectedTokenSequences[i].length;
                }
                for (int j = 0; j < expectedTokenSequences[i].length; j++) {
                expected.append(tokenImage[expectedTokenSequences[i][j]]).append(", ");
                }
        }
        return expected.substring(0, expected.length()-2);
  }

  static final public void programa() throws ParseException {
    try {
      jj_consume_token(tPROGRAMA);
      jj_consume_token(tIDENTIFICADOR);
      jj_consume_token(tFIN_SENTENCIA);
      declaracion_variables();
      declaracion_acciones();
      bloque_sentencias();
      jj_consume_token(0);
    } catch (ParseException e) {
                Token t = e.currentToken.next;
                System.out.println("ERROR SINT\u00c1CTICO ("
                + e.currentToken.next.beginLine
                + ", "
                + e.currentToken.next.beginColumn
                + ") : "
                + "En la declaraci\u00f3n de programa, "
                + "se ha encontrado "
                + e.tokenImage[t.kind]
                + " "
                + e.currentToken.next.image
                + ", se esperaba: "
                + expectedTokens(e.expectedTokenSequences,e.tokenImage)
                );

        do {
                t = getNextToken();
                } while (t!=null && t.kind != EOF );
    }
  }

  static final public void declaracion_variables() throws ParseException {
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tENTERO:
        case tBOOLEANO:
        case tCARACTER:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        declaracion();
        jj_consume_token(tFIN_SENTENCIA);
      }
    } catch (ParseException e) {
                Token t = e.currentToken.next;
                System.out.println("ERROR SINT\u00c1CTICO ("
                + e.currentToken.next.beginLine
                + ", "
                + e.currentToken.next.beginColumn
                + ") : "
                + "En la declaraci\u00f3n de variables, "
                + "se ha encontrado "
                + e.tokenImage[t.kind]
                + " "
                + e.currentToken.next.image
                + ", se esperaba: "
                + expectedTokens(e.expectedTokenSequences,e.tokenImage)
                );

                if(t.kind != tPRINCIPIO) {
                do {
                        t = getNextToken();

                        } while (t.kind != tFIN_SENTENCIA && t!=null && t.kind != EOF );
                }
    }
  }

  static final public void declaracion() throws ParseException {
    tipo_variables();
    identificadores();
  }

  static final public void identificadores() throws ParseException {
    jj_consume_token(tIDENTIFICADOR);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tCOMA:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(tCOMA);
      jj_consume_token(tIDENTIFICADOR);
    }
  }

  static final public void tipo_variables() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tENTERO:
      jj_consume_token(tENTERO);
      break;
    case tCARACTER:
      jj_consume_token(tCARACTER);
      break;
    case tBOOLEANO:
      jj_consume_token(tBOOLEANO);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void declaracion_acciones() throws ParseException {
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tACCION:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      declaracion_accion();
    }
  }

  static final public void declaracion_accion() throws ParseException {
    cabecera_accion();
    declaracion_variables();
    declaracion_acciones();
    bloque_sentencias();
  }

  static final public void cabecera_accion() throws ParseException {
    try {
      jj_consume_token(tACCION);
      jj_consume_token(tIDENTIFICADOR);
      parametros_formales();
      jj_consume_token(tFIN_SENTENCIA);
    } catch (ParseException e) {
        Token t = e.currentToken.next;
                System.out.println("ERROR SINT\u00c1CTICO ("
                + e.currentToken.next.beginLine
                + ", "
                + e.currentToken.next.beginColumn
                + ") : "
                + "cabecera accion, "
                + "se ha encontrado "
                + e.tokenImage[t.kind]
                + " "
                + e.currentToken.next.image
                + ", se esperaba: "
                + expectedTokens(e.expectedTokenSequences,e.tokenImage)
                );
                if(t.kind != tPRINCIPIO) {
                do {
                        t = getNextToken();

                        } while (t.kind != tFIN_SENTENCIA && t!=null && t.kind != EOF );
                }
    }
  }

  static final public void parametros_formales() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tPARENTESIS_IZQ:
        jj_consume_token(tPARENTESIS_IZQ);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tVAL:
        case tREF:
          parametros();
          label_4:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case tFIN_SENTENCIA:
              ;
              break;
            default:
              jj_la1[4] = jj_gen;
              break label_4;
            }
            jj_consume_token(tFIN_SENTENCIA);
            parametros();
          }
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
        jj_consume_token(tPARENTESIS_DCH);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
    } catch (ParseException e) {
        Token t = e.currentToken.next;
                System.out.println("ERROR SINT\u00c1CTICO ("
                + e.currentToken.next.beginLine
                + ", "
                + e.currentToken.next.beginColumn
                + ") : "
                + "Los parametros de la cabecera de la acci\u00f3n son incorrectos, "
                + "se ha encontrado "
                + e.tokenImage[t.kind]
                + " "
                + e.currentToken.next.image
                + ", se esperaba: "
                + expectedTokens(e.expectedTokenSequences,e.tokenImage)
                );

        do {
                t = getNextToken();
                } while (t.kind != tPARENTESIS_DCH && t!=null && t.kind != EOF );
    }
  }

  static final public void lista_parametros() throws ParseException {
    jj_consume_token(tIDENTIFICADOR);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tCOMA:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      jj_consume_token(tCOMA);
      jj_consume_token(tIDENTIFICADOR);
    }
  }

  static final public void parametros() throws ParseException {
    clase_parametros();
    tipo_variables();
    lista_parametros();
  }

  static final public void clase_parametros() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tVAL:
        jj_consume_token(tVAL);
        break;
      case tREF:
        jj_consume_token(tREF);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
                Token t = e.currentToken.next;
                System.out.println("ERROR SINT\u00c1CTICO ("
                + e.currentToken.next.beginLine
                + ", "
                + e.currentToken.next.beginColumn
                + ") : "
                + "Se ha encontrado "
                + e.tokenImage[t.kind]
                + " "
                + e.currentToken.next.image
                + ", se esperaba una clase del parametro: val o ref"
                );
    }
  }

  static final public void bloque_sentencias() throws ParseException {
    try {
      jj_consume_token(tPRINCIPIO);
      lista_sentencias();
      jj_consume_token(tFIN);
    } catch (ParseException e) {
        Token t = e.currentToken.next;
                System.out.println("ERROR SINT\u00c1CTICO ("
                + e.currentToken.next.beginLine
                + ", "
                + e.currentToken.next.beginColumn
                + ") : "
                + "En un bloque de sentencias "
                + "se ha encontrado "
                + e.tokenImage[t.kind]
                + " "
                + e.currentToken.next.image
                + ", se esperaba: "
                + expectedTokens(e.expectedTokenSequences,e.tokenImage)
                );

        do {
                t = getNextToken();
                } while (t.kind != tFIN && t!=null && t.kind != EOF );
    }
  }

  static final public void lista_sentencias() throws ParseException {
    label_6:
    while (true) {
      sentencia();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tSI:
      case tMQ:
      case tESCRIBIR:
      case tLEER:
      case tIDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
    }
  }

  static final public void sentencia() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tLEER:
        leer();
        jj_consume_token(tFIN_SENTENCIA);
        break;
      case tESCRIBIR:
        escribir();
        jj_consume_token(tFIN_SENTENCIA);
        break;
      case tIDENTIFICADOR:
        jj_consume_token(tIDENTIFICADOR);
        asig_incaccion();
        jj_consume_token(tFIN_SENTENCIA);
        break;
      case tSI:
        seleccion();
        break;
      case tMQ:
        mientras_que();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
          Token t = e.currentToken.next;
                System.out.println("ERROR SINT\u00c1CTICO ("
                + e.currentToken.next.beginLine
                + ", "
                + e.currentToken.next.beginColumn
                + ") : "
                + "En sentencia, "
                + "se ha encontrado "
                + e.tokenImage[t.kind]
                + " "
                + e.currentToken.next.image
                + ", se esperaba: "
                + expectedTokens(e.expectedTokenSequences,e.tokenImage)
                );

        do {
                t = getNextToken();
                } while (t.kind != tFIN_SENTENCIA && t!=null && t.kind != EOF );
    }
  }

  static final public void leer() throws ParseException {
    jj_consume_token(tLEER);
    jj_consume_token(tPARENTESIS_IZQ);
    lista_asignables();
    jj_consume_token(tPARENTESIS_DCH);
  }

  static final public void lista_asignables() throws ParseException {
    try {
      jj_consume_token(tIDENTIFICADOR);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tCOMA:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_7;
        }
        jj_consume_token(tCOMA);
        jj_consume_token(tIDENTIFICADOR);
      }
    } catch (ParseException e) {

    }
  }

  static final public void lista_escribibles() throws ParseException {
    lista_expresiones();
  }

  static final public void escribir() throws ParseException {
    jj_consume_token(tESCRIBIR);
    jj_consume_token(tPARENTESIS_IZQ);
    lista_escribibles();
    jj_consume_token(tPARENTESIS_DCH);
  }

  static final public void asig_incaccion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tOPAS:
      asignacion();
      break;
    default:
      jj_la1[12] = jj_gen;
      invocacion_accion();
    }
  }

  static final public void asignacion() throws ParseException {
    jj_consume_token(tOPAS);
    expresion();
  }

  static final public void invocacion_accion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tPARENTESIS_IZQ:
      argumentos();
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
  }

  static final public void mientras_que() throws ParseException {
    try {
      jj_consume_token(tMQ);
      expresion();
      lista_sentencias();
      jj_consume_token(tFMQ);
    } catch (ParseException e) {
        Token t = e.currentToken.next;
                System.out.println("ERROR SINT\u00c1CTICO ("
                + e.currentToken.next.beginLine
                + ", "
                + e.currentToken.next.beginColumn
                + ") : "
                + "En la cabecera de mq, "
                + "se ha encontrado "
                + e.tokenImage[t.kind]
                + " "
                + e.currentToken.next.image
                + ", se esperaba: "
                + expectedTokens(e.expectedTokenSequences,e.tokenImage)
                );

        do {
                t = getNextToken();
                } while (t.kind != tFMQ && t!=null && t.kind != EOF );
    }
  }

  static final public void seleccion() throws ParseException {
    try {
      jj_consume_token(tSI);
      expresion();
      jj_consume_token(tENT);
      lista_sentencias();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tSI_NO:
        jj_consume_token(tSI_NO);
        lista_sentencias();
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      jj_consume_token(tFSI);
    } catch (ParseException e) {
                Token t = e.currentToken.next;
                System.out.println("ERROR SINT\u00c1CTICO ("
                + e.currentToken.next.beginLine
                + ", "
                + e.currentToken.next.beginColumn
                + ") : "
                + "En seleccion, "
                + "se ha encontrado "
                + e.tokenImage[t.kind]
                + " "
                + e.currentToken.next.image
                + ", se esperaba: "
                + expectedTokens(e.expectedTokenSequences,e.tokenImage)
                );

        do {
                t = getNextToken();
                } while (t.kind != tFSI && t!=null && t.kind != EOF );
    }
  }

  static final public void argumentos() throws ParseException {
    try {
      jj_consume_token(tPARENTESIS_IZQ);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tNOT:
      case tTRUE:
      case tFALSE:
      case tENTACAR:
      case tCARAENT:
      case tPARENTESIS_IZQ:
      case tMAS:
      case tMENOS:
      case tCONSTENTERA:
      case tCONSTCHAR:
      case tCONSTCAD:
      case tIDENTIFICADOR:
        lista_expresiones();
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(tPARENTESIS_DCH);
    } catch (ParseException e) {
                Token t = e.currentToken.next;
                System.out.println("ERROR SINT\u00c1CTICO ("
                + e.currentToken.next.beginLine
                + ", "
                + e.currentToken.next.beginColumn
                + ") : "
                + "En la declaraci\u00f3n de argumentos, "
                + "se ha encontrado "
                + e.tokenImage[t.kind]
                + " "
                + e.currentToken.next.image
                + ", se esperaba: "
                + expectedTokens(e.expectedTokenSequences,e.tokenImage)
                );

        do {
                t = getNextToken();
                } while (t.kind != tPARENTESIS_DCH && t!=null && t.kind != EOF );
    }
  }

  static final public void lista_expresiones() throws ParseException {
    expresion();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tCOMA:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_8;
      }
      jj_consume_token(tCOMA);
      expresion();
    }
  }

  static final public void expresion() throws ParseException {
    expresion_simple();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tMAYOR:
    case tMENOR:
    case tIGUAL:
    case tMAI:
    case tMEI:
    case tNI:
      operador_relacional();
      expresion_simple();
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
  }

  static final public void operador_relacional() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tIGUAL:
        jj_consume_token(tIGUAL);
        break;
      case tNI:
        jj_consume_token(tNI);
        break;
      case tMENOR:
        jj_consume_token(tMENOR);
        break;
      case tMAYOR:
        jj_consume_token(tMAYOR);
        break;
      case tMEI:
        jj_consume_token(tMEI);
        break;
      case tMAI:
        jj_consume_token(tMAI);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
          Token t = e.currentToken.next;
          System.out.println("ERROR SINT\u00c1CTICO ("
                + e.currentToken.next.beginLine
                + ", "
                + e.currentToken.next.beginColumn
                + ") : "
                + "Se ha encontrado "
                + e.tokenImage[t.kind]
                + " "
                + e.currentToken.next.image
                + ", se esperaba un operador relacional: =,<>,<,>,<=,>="
                );
    }
  }

  static final public void expresion_simple() throws ParseException {
    termino();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tOR:
      case tMAS:
      case tMENOS:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_9;
      }
      operador_aditivo();
      termino();
    }
  }

  static final public void operador_aditivo() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tMAS:
        jj_consume_token(tMAS);
        break;
      case tMENOS:
        jj_consume_token(tMENOS);
        break;
      case tOR:
        jj_consume_token(tOR);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
      Token t = e.currentToken.next;
          System.out.println("ERROR SINT\u00c1CTICO ("
                + e.currentToken.next.beginLine
                + ", "
                + e.currentToken.next.beginColumn
                + ") : "
                + "Se ha encontrado "
                + e.tokenImage[t.kind]
                + " "
                + e.currentToken.next.image
                + ", se esperaba un operador relacional: +,-,OR"
                );
    }
  }

  static final public void termino() throws ParseException {
    factor();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tAND:
      case tMOD:
      case tDIV:
      case tMUL:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_10;
      }
      operador_multiplicativo();
      factor();
    }
  }

  static final public void operador_multiplicativo() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tMUL:
        jj_consume_token(tMUL);
        break;
      case tDIV:
        jj_consume_token(tDIV);
        break;
      case tMOD:
        jj_consume_token(tMOD);
        break;
      case tAND:
        jj_consume_token(tAND);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        Token t = e.currentToken.next;
          System.out.println("ERROR SINT\u00c1CTICO ("
                + e.currentToken.next.beginLine
                + ", "
                + e.currentToken.next.beginColumn
                + ") : "
                + "Se ha encontrado "
                + e.tokenImage[t.kind]
                + " "
                + e.currentToken.next.image
                + ", se esperaba un operador multiplicativo: *,div,mod,>,and"
                );
    }
  }

  static final public void factor() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tMENOS:
        jj_consume_token(tMENOS);
        factor();
        break;
      case tMAS:
        jj_consume_token(tMAS);
        factor();
        break;
      case tNOT:
        jj_consume_token(tNOT);
        factor();
        break;
      case tPARENTESIS_IZQ:
        jj_consume_token(tPARENTESIS_IZQ);
        expresion();
        jj_consume_token(tPARENTESIS_DCH);
        break;
      case tENTACAR:
        jj_consume_token(tENTACAR);
        jj_consume_token(tPARENTESIS_IZQ);
        expresion();
        jj_consume_token(tPARENTESIS_DCH);
        break;
      case tCARAENT:
        jj_consume_token(tCARAENT);
        jj_consume_token(tPARENTESIS_IZQ);
        expresion();
        jj_consume_token(tPARENTESIS_DCH);
        break;
      case tIDENTIFICADOR:
        jj_consume_token(tIDENTIFICADOR);
        break;
      case tCONSTENTERA:
        jj_consume_token(tCONSTENTERA);
        break;
      case tCONSTCHAR:
        jj_consume_token(tCONSTCHAR);
        break;
      case tCONSTCAD:
        jj_consume_token(tCONSTCAD);
        break;
      case tTRUE:
        jj_consume_token(tTRUE);
        break;
      case tFALSE:
        jj_consume_token(tFALSE);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        Token t = e.currentToken.next;
          System.out.println("ERROR SINT\u00c1CTICO ("
                + e.currentToken.next.beginLine
                + ", "
                + e.currentToken.next.beginColumn
                + ") : "
                + "Se ha encontrado "
                + e.tokenImage[t.kind]
                + " "
                + e.currentToken.next.image
                + ", se esperaba un factor"
                );

                do {
                t = getNextToken();
                } while (t.kind != tPARENTESIS_DCH && t.kind != tIDENTIFICADOR && t.kind != tCONSTENTERA
                        && t.kind != tCONSTCHAR && t.kind != tCONSTCAD && t.kind != tTRUE && t.kind != tFALSE
                        && t!=null && t.kind != EOF );
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CompiladorMiniLengTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[24];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x7000000,0x0,0x7000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0xd1000,0xd1000,0x0,0x0,0x0,0x4000,0x78800000,0x0,0x0,0x0,0x400000,0x400000,0x300000,0x300000,0x78800000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x400,0x0,0x0,0x200,0x3,0x800,0x400,0x3,0x400000,0x400000,0x400,0x100,0x800,0x0,0x786800,0x400,0xfc,0xfc,0x6000,0x6000,0x18000,0x18000,0x786800,};
   }

  /** Constructor with InputStream. */
  public CompiladorMiniLeng(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CompiladorMiniLeng(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompiladorMiniLengTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CompiladorMiniLeng(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CompiladorMiniLengTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CompiladorMiniLeng(CompiladorMiniLengTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CompiladorMiniLengTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[55];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 24; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 55; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
